#!/usr/bin/env perl

use strict;
use warnings;
use File::Basename qw(basename);
use Config::Tiny;
use Getopt::Long;
use Net::Twitter::Lite;

my $DEBUG = -f '.debug';

GetOptions('debug'      => \$DEBUG,
	   'file=s'     => \my $photo,
	   'interval=n' => \my $interval,
	   'perline'    => \my $perline,
    );

my $status = join(' ', @ARGV);
unless ($status) {
    $status = join('', <STDIN>);
    chomp $status;
}

my $prog = basename($0);
my $conf = "$ENV{HOME}/.$prog";
my $ini  = Config::Tiny->read($conf);
die Config::Tiny->errstr unless $ini;

my %consumer_tokens = +(
    consumer_key    => $ini->{_}->{'Consumer key'},
    consumer_secret => $ini->{_}->{'Consumer secret'},
    legacy_lists_api => 0,
    apiurl           => 'https://api.twitter.com/1.1', # ad hoc v1.1 support
    upload_url       => 'https://api.twitter.com/1.1',
    );
my $access_token        = $ini->{_}->{'Access Token'};
my $access_token_secret = $ini->{_}->{'Access Token Secret'};
$interval ||= $ini->{_}->{interval} || 1;

my $tw;
if (! $DEBUG) {
    $tw = Net::Twitter::Lite->new(%consumer_tokens);
    $tw->access_token($access_token);
    $tw->access_token_secret($access_token_secret);
}

sub loadPhoto {
    my $file;

    if ($photo) {
	if ($photo =~ qr{^https?://}o) {
	    use File::Temp;
	    use LWP::Simple 'getstore';
	    use HTTP::Status;

	    my $tmpfile = File::Temp->new->filename;
	    $file = $tmpfile if getstore($photo, $tmpfile) == RC_OK;
	} else {
	    $file = $photo if -f $photo;
	}
	die "$photo not exist" unless $file;

	use LWP::MediaTypes 'guess_media_type';
	my $mime_type = guess_media_type($photo);

	my $size = -s $file;

	if ($tw) {
	    my $config = $tw->get_configuration;
	    print 'DEBUG size limit '.$config->{photo_size_limit}."\n";

	    if ($size > $config->{photo_size_limit}) {
		warn "size limit $config->{photo_size_limit} exceeded $photo";
	    }
	}
	my $content = do {
	    open my $fh, '<:bytes', $file or die "$!: $file";
	    local $/;
	    <$fh>;
	};

	return [ undef, basename($file), Content_Type => $mime_type, Content => $content ];
    }
    undef;
}

sub update {
    my $status = shift;

    my $file = loadPhoto();

    if ($DEBUG) {
	print "DEBUG $status\n";
    } else {
	if ($file) {
	    eval { $tw->update_with_media($status, $file) };
	} else {
	    utf8::decode($status);
	    eval { $tw->update({status => $status}) };
	}
	die $@ if $@;
    }
}

if ($status) {
    if ($perline) {
	my @lines = split("\n", $status);
	foreach my $idx (0 .. $#lines) {
	    update($lines[$idx]);
	    sleep($interval) if $interval && $idx != $#lines;
	}
    } else {
	update($status);
    }
}
